version: "3.8"


volumes:
  pgdata:

  cache:
    driver: local


services:

  app:
    build:
      context: .
      dockerfile: djangoblog/Dockerfile
    image: djangoblog-app
    volumes:
      - ./djangoblog:/app
    command: sh -c "python manage.py migrate && gunicorn djangoblog.wsgi:application --bind 0.0.0.0:8000"
    # command: python manage.py runserver 0.0.0.0:8000
    security_opt:
      - no-new-privileges:true
    ports:
      - 1337:80
    depends_on:
      - postgres

  celery_worker:
    restart: on-failure
    container_name: dj-celery-worker
    command: celery -A djangoblog worker -l info
    image: djangoblog-app
    security_opt:
      - no-new-privileges:true
    volumes:
      - ./djangoblog:/app
    depends_on:
      - app
      - postgres
      - redis

  rabbitmq:
    image: rabbitmq:3.11.26-management
    container_name: dj-rabbitmq
    security_opt:
      - no-new-privileges:true
    ports:
      - 5672:5672
      - 15672:15672

  
  redis:
    container_name: dj-redis
    restart: on-failure
    build:
      context: redis/
    security_opt:
      - no-new-privileges:true
    ports:
      - 6379:6379
    command: redis-server --loglevel warning
    # Run as privileged to allow the container to change the vm.overcommit_memory setting
    privileged: true
    volumes:
      - ./data/redis:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf

  nginx:
    restart: on-failure
    container_name: dj-nginx
    build:
      context: nginx/
    ports:
      - "8080:80"
    depends_on:
      - app

  postgres:
    container_name: dj-postgres
    restart: on-failure
    build:
      context: postgres/
    security_opt:
      - no-new-privileges:true
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./data/pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
