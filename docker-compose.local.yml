name: djangoblog

services:

  haproxy:
    environment:
      HAPROXY_PORT: 8082
    ports: !override
      - 8082:8082
      - 8404:8404 # Haproxy stats
      - 8405:8405 # Prometheus metrics

  # Docker logs monitoring
  dozzle:
    profiles:
      - dashboard
    image: amir20/dozzle:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 8889:8889

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - 9090:9090
    networks:
      - default
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./infra/prometheus/rules.yml:/etc/prometheus/rules.yml
      - prometheus_data:/infra/prometheus
    develop:
      watch:
        - action: rebuild
          path: ./infra/prometheus/
    depends_on:
      postgres:
        condition: service_healthy
      app:
        condition: service_healthy
      worker:
        condition: service_healthy
      redis-master:
        condition: service_healthy

  grafana:
    image: grafana/grafana-oss
    restart: unless-stopped
    networks:
      - default
    depends_on:
      - prometheus
    ports:
      - 3010:3000
    healthcheck:
      test: ["CMD-SHELL", "curl -f localhost:3000/api/health"]
      interval: 10s
      retries: 30
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_LOG_LEVEL: warn
      RENDERING_MODE: "reusable"
      ENABLE_METRICS: true
      GF_LOG_FILTERS: "rendering:warn,rendering:error"
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-piechart-panel"
      GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS: "grafana-clock-panel,grafana-piechart-panel"
    volumes:
      - ./infra/grafana/provisioning/:/etc/grafana/provisioning/
      - grafana_data:/var/lib/grafana


  rabbitmq:
    image: rabbitmq:4.1.2-management@sha256:b19379c75c518853b02ab09dfdb84d42b1d40d319bfd315b29ed9e7a32c7968d
    profiles:
      - donotstart
    platform: linux/arm64
    security_opt:
      - no-new-privileges:true
    ports:
      - 5675:5675

  statsd-exporter:
    build:
      context: docker/statsd
    networks:
      - default
    ports:
      - 9125:9125/udp
      - 9102:9102

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    ports:
      - 9187:9187
    networks:
      - default
    env_file:
      - .env
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DB_HOST}:${PGPORT}/${POSTGRES_DB}?sslmode=disable"
    links:
      - postgres
      - prometheus
    depends_on:
      postgres:
        condition: service_healthy

  alertmanager:
    image: quay.io/prometheus/alertmanager
    restart: unless-stopped
    ports:
      - 9093:9093
    networks:
      - default
    env_file:
      - .env
    volumes:
      - ./infra/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/data
    depends_on:
      - prometheus

  node_exporter:
    image: quay.io/prometheus/node-exporter
    restart: always
    command:
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
      - '--no-collector.ipvs'
    networks:
      - default
    ports:
      - 9100:9100
    volumes:
        - /:/rootfs:ro
        - /proc:/host/proc:ro
        - /sys:/host/sys:ro

  celery-exporter:
    build:
      context: docker/celery-exporter
    environment:
      - CE_BROKER_URL=redis://redis-master:6379/0
      - CE_ACCEPT_CONTENT=application/json,application/x-msgpack,application/x-python-serialize
    platform: linux/amd64
    ports:
      - 9808:9808
    networks:
      - default
    depends_on:
      redis-master:
        condition: service_healthy
      worker:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9808/metrics || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 3

  pgbouncer-exporter:
    image: prometheuscommunity/pgbouncer-exporter:latest
    command: [
      "--pgBouncer.connectionString=postgres://pgbouncer:securepassword@pgbouncer:6432/pgbouncer?sslmode=disable"
    ]
    ports:
      - 9127:9127
    networks:
      - default
    platform: linux/amd64
    depends_on:
      pgbouncer:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9127/metrics || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 10s
    env_file:
      - .env

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    attach: false
    privileged: true
    ports:
      - 9323:8080
    networks:
      - default
    labels:
      org.label-schema.group: "monitoring"
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /etc/machine-id:/etc/machine-id:ro
      - /var/lib/docker:/var/lib/docker
      - /dev/disk:/dev/disk:ro
    command: -logtostderr -docker_only
    restart: unless-stopped
    depends_on:
      app:
        condition: service_healthy

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: nginx-exporter
    ports:
      - 9113:9113
    command:
      - '-nginx.scrape-uri=http://nginx:80/status/'
    depends_on:
      nginx:
        condition: service_healthy
    networks:
      - default

networks:
  default:
    driver: bridge

volumes:
  grafana_data:
  prometheus_data:
  rabbitmq_data:
  alertmanager_data:
  grafana_provisioning:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./infra/grafana/provisioning
