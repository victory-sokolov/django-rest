name: djangoblog

x-environment: &default-env
  TZ: Europe/Riga

services:

  app:
    extends:
      file: ./docker/docker-compose.common.yml
      service: application
    networks:
      - default
      - docker-elk_elk
    volumes:
       - static_volume:/app/output/static
    ports:
      - 8001:8001
    expose:
      - 8001
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://0.0.0.0:80/health/app"]
      interval: 15s
      timeout: 15s
      retries: 5
      start_period: 30s

  worker:
    extends:
      file: ./docker/docker-compose.common.yml
      service: application
    restart: unless-stopped
    environment:
      <<: *default-env
    networks:
      - default
      - docker-elk_elk
    command: >
      sh -c "
      watchmedo auto-restart \
      --directory=./djangoblog \
      --pattern='**/tasks/*.py' \
      --recursive -- \
      celery -A djangoblog worker -P gevent -c 1000 -l info --uid=nobody --gid=nogroup
      "
    volumes:
      - type: bind
        source: ./djangoblog
        target: /app/djangoblog
    healthcheck:
      test: ["CMD-SHELL", "celery", "-A", "djangoblog", "inspect", "ping"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 60s

  redis-master:
    restart: unless-stopped
    container_name: redis-master
    networks:
      - default
    build:
      context: docker/redis/
    environment:
      <<: *default-env
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
    # Run as privileged to allow the container to change the
    # vm.overcommit_memory setting
    privileged: true
    volumes:
      - redis-master:/data
    deploy:
      resources:
        limits:
          memory: 2g
          cpus: '1'

  redis-slave:
    build:
      context: docker/redis/
    command: ["redis-server", "redis.conf", "--replicaof", "redis-master", "6379"]
    volumes:
      - redis-slave:/data
    environment:
      <<: *default-env
    networks:
      - default
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
    depends_on:
      redis-master:
        condition: service_healthy

  redis-sentinel:
    image: redis:8.0.3@sha256:f957ce918b51f3ac10414244bedd0043c47db44a819f98b9902af1bd9d0afcea
    container_name: redis-sentinel
    environment:
      <<: *default-env
    depends_on:
      redis-master:
        condition: service_healthy
      redis-slave:
        condition: service_healthy
    networks:
      - default
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "26379", "ping"]
      interval: 5s
      timeout: 5s
      retries: 2
    ports:
      - 26379:26379
    volumes:
      - ./docker/redis/sentinel.conf:/usr/local/etc/redis/sentinel.conf
      - sentinel-data:/data
    command: "redis-sentinel /usr/local/etc/redis/sentinel.conf --sentinel"

  nginx:
    restart: on-failure
    build:
      context: docker/nginx/
    environment:
      <<: *default-env
    networks:
      - default
      - docker-elk_elk
    volumes:
      - static_volume:/app/output/static
      - ./certs:/etc/nginx/certs:ro
    develop:
      watch:
        - action: rebuild
          path: ./docker/nginx/nginx.conf
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      timeout: 25s
      retries: 5
    ports:
      - 80:80
      - 443:443
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1'
    depends_on:
      app:
        condition: service_healthy

  postgres:
    restart: on-failure
    networks:
      - default
      - docker-elk_elk
    env_file:
      - .env
    environment:
      <<: *default-env
      POSTGRES_MULTIPLE_DATABASES: "blog, blog_read_replica"
    build:
      context: ./docker/postgres
    ports:
      - 5431:5431
    volumes:
      - postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -p ${PGPORT} -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 3


  pgbouncer:
    build:
      context: ./docker/pgbouncer
    networks:
      - default
    env_file:
      - .env
    ports:
      - 6432:6432
    environment:
      <<: *default-env
    healthcheck:
      test: ["CMD-SHELL", 'PGPASSWORD=${POSTGRES_PASSWORD} psql -h 127.0.0.1 -p 6432 -U pgbouncer -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 30s
    depends_on:
      postgres:
        condition: service_healthy
    develop:
      watch:
        - action: rebuild
          path: ./docker/pgbouncer/pgbouncer.ini

  haproxy:
    networks:
      - default
      - docker-elk_elk
    build:
      context: docker/haproxy/
    volumes:
     - ./certs:/usr/local/etc/haproxy/certs:ro
    restart: always
    develop:
      watch:
        - action: rebuild
          path: ./docker/haproxy/haproxy.cfg
    environment:
      <<: *default-env
      HAPROXY_PORT: 8080
    ports:
      - 8080:8080
      - 8404:8404 # Haproxy stats
      - 8405:8405 # Prometheus metrics
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://admin:password@localhost:8404/stats"]
      interval: 30s
      timeout: 5s
      retries: 3
    depends_on:
      app:
        condition: service_healthy


networks:
  default:
    driver: bridge
  # External elk docker network
  # docker network create docker-elk_elk
  docker-elk_elk:
    external: true

volumes:
  postgres:
  redis-master:
  redis-slave:
  static_volume:
  sentinel-data:
