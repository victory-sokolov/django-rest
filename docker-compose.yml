name: djangoblog

services:

  app:
    env_file:
      - .env
    build:
      context: .
      dockerfile: Dockerfile
      args:
        DEV_DEPS: true
    volumes:
      - static_volume:/app/output/static
      - .:/app
    networks:
      - default
    ports:
      - 8001:80
    depends_on:
      - postgres
      - redis

  worker:
    restart: unless-stopped
    build:
      context: .
      dockerfile: Dockerfile
      args:
        DEV_DEPS: true
    env_file:
      - .env
    networks:
      - default
    command: >
      sh -c "
      uv run watchmedo auto-restart \
      --directory=./djangoblog \
      --pattern='**/tasks/*.py' \
      --recursive -- \
      uv run celery -A djangoblog worker -l info
      "
      # sh -c "uv run celery -A djangoblog worker -l info --uid=nobody --gid=nogroup"
    volumes:
      - type: bind
        source: ./djangoblog
        target: /app/djangoblog
    healthcheck:
      test: ["CMD-SHELL", "celery", "-A", "djangoblog", "inspect", "ping"]
      interval: 15s
      timeout: 10s
      retries: 5
    depends_on:
      - app
      - redis
      - postgres

  redis:
    restart: unless-stopped
    networks:
      - default
    build:
      context: docker/redis
    environment:
      - TZ=Etc/GMT-3
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
    # Run as privileged to allow the container to change the
    # vm.overcommit_memory setting
    privileged: true
    volumes:
      - redis:/data:rw
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: '1'

  nginx:
    restart: on-failure
    build:
      context: docker/nginx/
    networks:
      - default
    volumes:
      - static_volume:/app/output/static
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      timeout: 25s
      retries: 5
    depends_on:
      - app
    ports:
      - "8080:80"
      - "443:443"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1'

  postgres:
    restart: on-failure
    networks:
      - default
    env_file:
      - .env
    build:
      context: ./docker/postgres
    ports:
      - "5431:5431"
    volumes:
      - data:/var/lib/postgresql/data
    environment:
      - TZ=Etc/GMT-3
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -p ${PGPORT} -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 3

  haproxy:
    networks:
      - default
    build:
      context: docker/haproxy/
    restart: always
    ports:
      - "8002:8002"
    depends_on:
      - app

networks:
  default:
    driver: bridge

volumes:
  data:
  redis:
  static_volume:
