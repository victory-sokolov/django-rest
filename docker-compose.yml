name: djangoblog

x-environment: &default-env
  TZ: Europe/Riga
  DJANGO_LOG_LEVEL: DEBUG

services:

  app:
    env_file:
      - .env
    environment:
      <<: *default-env
    build:
      context: .
      dockerfile: Dockerfile
      args:
        DEV_DEPS: true
    develop:
      watch:
        - action: sync
          path: .
          target: /app
          ignore:
            - .venv/
        - action: rebuild
          path: ./pyproject.toml
    networks:
      - default
    volumes:
       - static_volume:/app/output/static
    ports:
      - 8001:8001
    expose:
      - 8001
    # healthcheck:
    #   test: ["CMD", "curl", "--fail", "http://0.0.0.0:80/healthcheck"]
    #   timeout: 5s
    #   retries: 3
    #   start_period: 50s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  worker:
    restart: unless-stopped
    build:
      context: .
      dockerfile: Dockerfile
      args:
        DEV_DEPS: true
    env_file:
      - .env
    environment:
      <<: *default-env
    networks:
      - default
    command: >
      sh -c "
      uv run watchmedo auto-restart \
      --directory=./djangoblog \
      --pattern='**/tasks/*.py' \
      --recursive -- \
      uv run celery -A djangoblog worker -l info --uid=nobody --gid=nogroup
      "
      # sh -c "uv run celery -A djangoblog worker -l info --uid=nobody --gid=nogroup"
    volumes:
      - type: bind
        source: ./djangoblog
        target: /app/djangoblog
    healthcheck:
      test: ["CMD-SHELL", "celery", "-A", "djangoblog", "inspect", "ping"]
      interval: 15s
      timeout: 10s
      retries: 5
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  redis:
    restart: unless-stopped
    networks:
      - default
    build:
      context: docker/redis
    environment:
      <<: *default-env
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
    # Run as privileged to allow the container to change the
    # vm.overcommit_memory setting
    privileged: true
    volumes:
      - redis:/data:rw
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: '1'

  nginx:
    restart: on-failure
    build:
      context: docker/nginx/
    environment:
      <<: *default-env
    networks:
      - default
    volumes:
      - static_volume:/app/output/static
      - ./certs:/etc/nginx/certs:ro
    develop:
      watch:
        - action: rebuild
          path: ./docker/nginx/nginx.conf
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      timeout: 25s
      retries: 5
    depends_on:
      - app
    ports:
      - 80:80
      - 443:443
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1'

  postgres:
    restart: on-failure
    networks:
      - default
    env_file:
      - .env
    environment:
      <<: *default-env
    build:
      context: ./docker/postgres
    ports:
      - 5431:5431
    volumes:
      - data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -p ${PGPORT} -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 3

  haproxy:
    networks:
      - default
    env_file:
      - .env
    environment:
      <<: *default-env
    build:
      context: docker/haproxy/
    volumes:
     - ./certs:/usr/local/etc/haproxy/certs:ro
    restart: always
    develop:
      watch:
        - action: rebuild
          path: ./docker/haproxy/haproxy.cfg
    ports:
      - ${HAPROXY_PORT}:${HAPROXY_PORT}
      - 8404:8404 # Haproxy stats
      - 8405:8405 # Prometheus metrics
    depends_on:
      - app

networks:
  default:
    driver: bridge

volumes:
  data:
  redis:
  static_volume:
